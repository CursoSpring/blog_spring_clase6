<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Esta etiqueta habilita las anotaciones de sring -->
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Esta etiqueta le indica a spring que cualquier ruta que sea de la froma 
		context-root/resources/recurso_estatico (imagen, css, etc) no deve ser procesada 
		por el controlador al frente. En realidad es el directorio para los recursos 
		estaticos El parametro location es el nombre real del directorio de recursos, 
		el mapping es un nombre virtual (para mapear) -->
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Configuracion del path para buscar los jsp -->
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>


	<!-- Le dice a srping donde (bajo que paquete) buscar clases con anotaciones 
		spring -->
	<context:component-scan base-package="org.upiita.spring.controladores" />


	<!-- Este unico <beans:bean id="messageSource" basta para internacionalizacion es la forma 1 -->

	<!-- Internacionalizacion beans:bean da de alta en el contexto de spring 
		una una clase (la del atrib class) -->
	<beans:bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<!-- Esta propiedad controla el nombre de los archivos der internazionalizacion -->
		<beans:property name="basename" value="mensajes" />
	</beans:bean>

	<!-- Forma 2 (Agregando lo siguiente) de decirle a spring como resolver la localizacion -->

	<!-- Damos de alta un resolvedro de localidad (Forma 2)
	<beans:bean id="localeResolver"
		class="org.springframework.web.servlet.i18n.CookieLocaleResolver">
		<beans:property name="cookieName" value="laCookieDelLenguaje" />
		<beans:property name="cookieMaxAge" value="60000" />
	</beans:bean> -->

	<!-- Forma 3 -->
	<beans:bean id="localeResolver"    
	class="org.springframework.web.servlet.i18n.SessionLocaleResolver" />


	<!-- Estas lineas siguientes van para la forma 2 y 3 de internacionalizacion -->

	<!--
	 Este componente permite usar una query string (parametro) para cambiar la localidad
	 del lenguaje
	 -->
	<beans:bean id="localeChangeInterceptor"
		class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
		<!-- es el query string o parametro para cambiar el lenguaje -->
		<beans:property name="paramName" value="lenguaje" />
	</beans:bean>

	<!-- Finalmente damos de alta el local change interceptor -->
	<interceptors>
		<beans:ref bean="localeChangeInterceptor" />
	</interceptors>

	<!-- Dar de alta un a clase en session  <aop:scoped-proxy/> eficienta -->
	<beans:bean class="org.upiita.spring.formas.FormaSession" scope="session">
		<aop:scoped-proxy/>
	</beans:bean>

</beans:beans>
