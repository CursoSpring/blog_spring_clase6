<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">


	<!-- Creacion del dataSource -->
	<jdbc:embedded-database id="dataSource" type="HSQL">
		<jdbc:script location="classpath:estructura-base.sql" />
		<jdbc:script location="classpath:datos-prueba.sql" />
	</jdbc:embedded-database>


	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<!-- Inicializamos la propiedad dataSource con la instancia de datasource 
			de arriba -->
		<property name="dataSource" ref="dataSource" />
		<!-- Asi le decimos a hibernate el paquete en donde buscar las entidades 
			para mapeo -->
		<property name="packagesToScan" value="org.upiita.spring.entidades" />
		<property name="hibernateProperties">
			<map>
				<entry key="hibernate.dialect" value="org.hibernate.dialect.HSQLDialect" />
				<entry key="hibernate.show_sql" value="false" />
			</map>
		</property>
	</bean>


	<!-- Le dice a srping donde (bajo que paquete) buscar clases con anotaciones 
		spring -->
	<context:component-scan base-package="org.upiita.spring.dao,org.upiita.spring.aspectos" />

	<!-- Para tener una transaccion declarativa (no programatica) 
	 Con esto estamos instanciando en el contexto de spring de la clase (por el beqan sinonimo de @Autow..) 
	 org.springframework.orm.hibernate4.HibernateTransactionManager
	 
	 con el ref => las inyectamos
	-->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="dataSource" ref="dataSource" />
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<tx:annotation-driven transaction-manager="transactionManager" />


	<!-- Para lo de AOP (registramos en el contexto de spring la clase Logging) es el equivalente al @component pero con xml--> 
	<bean id="logging-aspecto" class="org.upiita.spring.aspectos.Logging"/>
 
 
	<!-- EN ESTA ETIQUETA VAN LOS ASPECTOS Y SUS ADVICES (ANTES Y DESPUES) 
		
			Configuracion por xml, para hacerlo por anotaciones debe estar comentado

		EN ESTE SE AGREGO ESTE org.upiita.spring.aspectos PARA LA CONFIGURACION POR ANOTACIONES
		<context:component-scan base-package="org.upiita.spring.dao,org.upiita.spring.aspectos" />
	
	
	-->
<!-- 
	<aop:config>
	
		<aop:aspect ref="logging-aspecto">
-->			<!-- metodo que quiero que se invoque antes -->
<!-- 			<aop:before method="antesDeInvocar" pointcut="execution(* org.upiita.spring.dao.UsuarioDAO.buscaPorId(..))"/>
			<aop:after method="despuesDeInvocar" pointcut="execution(* org.upiita.spring.dao.UsuarioDAO.buscaPorId(..))"/>
		</aop:aspect>
	
	</aop:config>
 --> 

	<!-- NOS PERMITE BUSCAR COMPONENTES MARCADOS PARA SER ASPECTOS CON ANOTACIONES -->
	<aop:aspectj-autoproxy/>

 
</beans>
